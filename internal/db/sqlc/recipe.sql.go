// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: recipe.sql

package db

import (
	"context"
	"encoding/json"
	"time"

	"github.com/lib/pq"
)

const createRecipe = `-- name: CreateRecipe :one
INSERT INTO recipes (
    name, 
    description, 
    ingredients, 
    steps,
    total_time,
    created_at,
    updated_at
) VALUES (
      $1, $2, $3, $4, $5, $6, $7
)
RETURNING id, name, description, ingredients, steps, total_time, created_at, updated_at
`

type CreateRecipeParams struct {
	Name        string          `json:"name"`
	Description string          `json:"description"`
	Ingredients []string        `json:"ingredients"`
	Steps       json.RawMessage `json:"steps"`
	TotalTime   int16           `json:"total_time"`
	CreatedAt   time.Time       `json:"created_at"`
	UpdatedAt   time.Time       `json:"updated_at"`
}

func (q *Queries) CreateRecipe(ctx context.Context, arg CreateRecipeParams) (Recipe, error) {
	row := q.db.QueryRowContext(ctx, createRecipe,
		arg.Name,
		arg.Description,
		pq.Array(arg.Ingredients),
		arg.Steps,
		arg.TotalTime,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Recipe
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		pq.Array(&i.Ingredients),
		&i.Steps,
		&i.TotalTime,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteRecipeByID = `-- name: DeleteRecipeByID :one
DELETE FROM recipes
WHERE id = $1
RETURNING id
`

func (q *Queries) DeleteRecipeByID(ctx context.Context, id int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, deleteRecipeByID, id)
	err := row.Scan(&id)
	return id, err
}

const getRecipeByID = `-- name: GetRecipeByID :one
SELECT id, name, description, ingredients, steps, total_time, created_at, updated_at FROM recipes
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetRecipeByID(ctx context.Context, id int64) (Recipe, error) {
	row := q.db.QueryRowContext(ctx, getRecipeByID, id)
	var i Recipe
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		pq.Array(&i.Ingredients),
		&i.Steps,
		&i.TotalTime,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getRecipeByIngredients = `-- name: GetRecipeByIngredients :many
SELECT id, name, description, ingredients, steps, total_time, created_at, updated_at FROM recipes 
WHERE ingredients @> ARRAY[$1]
LIMIT 100 OFFSET 0
`

func (q *Queries) GetRecipeByIngredients(ctx context.Context, ingredients []string) ([]Recipe, error) {
	rows, err := q.db.QueryContext(ctx, getRecipeByIngredients, pq.Array(ingredients))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Recipe{}
	for rows.Next() {
		var i Recipe
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			pq.Array(&i.Ingredients),
			&i.Steps,
			&i.TotalTime,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRecipes = `-- name: GetRecipes :many
SELECT 
    id,
    name,
    description,
    ingredients,
    steps,
    total_time,
    created_at,
    updated_at
FROM recipes ORDER BY id
`

func (q *Queries) GetRecipes(ctx context.Context) ([]Recipe, error) {
	rows, err := q.db.QueryContext(ctx, getRecipes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Recipe{}
	for rows.Next() {
		var i Recipe
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			pq.Array(&i.Ingredients),
			&i.Steps,
			&i.TotalTime,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRecipesByTime = `-- name: GetRecipesByTime :many
SELECT 
    id,
    name,
    description,
    ingredients,
    steps,
    total_time,
    created_at,
    updated_at
FROM recipes ORDER BY total_time
`

func (q *Queries) GetRecipesByTime(ctx context.Context) ([]Recipe, error) {
	rows, err := q.db.QueryContext(ctx, getRecipesByTime)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Recipe{}
	for rows.Next() {
		var i Recipe
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			pq.Array(&i.Ingredients),
			&i.Steps,
			&i.TotalTime,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRecipe = `-- name: UpdateRecipe :one
UPDATE recipes
SET
	name = $2,
	description = $3,
	ingredients = $4,
	steps = $5,
	total_time = $6,
	updated_at = $7
WHERE id = $1
RETURNING id, name, description, ingredients, steps, total_time, created_at, updated_at
`

type UpdateRecipeParams struct {
	ID          int64           `json:"id"`
	Name        string          `json:"name"`
	Description string          `json:"description"`
	Ingredients []string        `json:"ingredients"`
	Steps       json.RawMessage `json:"steps"`
	TotalTime   int16           `json:"total_time"`
	UpdatedAt   time.Time       `json:"updated_at"`
}

func (q *Queries) UpdateRecipe(ctx context.Context, arg UpdateRecipeParams) (Recipe, error) {
	row := q.db.QueryRowContext(ctx, updateRecipe,
		arg.ID,
		arg.Name,
		arg.Description,
		pq.Array(arg.Ingredients),
		arg.Steps,
		arg.TotalTime,
		arg.UpdatedAt,
	)
	var i Recipe
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		pq.Array(&i.Ingredients),
		&i.Steps,
		&i.TotalTime,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
